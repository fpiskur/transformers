{"ast":null,"code":"import _slicedToArray from \"/home/chof/Projects/transformers/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/chof/Projects/transformers/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/chof/Projects/transformers/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/chof/Projects/transformers/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/chof/Projects/transformers/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/chof/Projects/transformers/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/chof/Projects/transformers/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/chof/Projects/transformers/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/chof/Projects/transformers/src/pages/EditPage.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router';\nimport TransformerForm from '../components/TransformerForm.js';\n\nvar EditPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditPage, _Component);\n\n  function EditPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      redirect: false\n    };\n    _this.editInit = {\n      // Vehicles\n      availableVehicleTypes: [],\n      availableVehicleModels: [],\n      typesDisabled: false,\n      modelsDisabled: false,\n      // Transformer\n      name: '',\n      status: '',\n      faction: '',\n      gear: [],\n      vehicleGroup: '',\n      vehicleType: '',\n      vehicleModel: '',\n      id: ''\n    };\n\n    _this.saveChanges = function (preparedData) {\n      var transformers = _toConsumableArray(_this.props.transformers);\n\n      var transformerKey = _this.getTransformerKey(preparedData, transformers);\n\n      transformers[transformerKey] = preparedData; // mutating a list to keep the order of transformers (and TransformerStatus working)\n\n      fetch(\"https://my-json-server.typicode.com/fpiskur/transformers-api/transformers/\".concat(preparedData.id), {\n        method: 'PUT',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(_objectSpread({}, preparedData))\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        _this.setState({\n          redirect: true\n        });\n\n        _this.props.updateTransformersList(transformers);\n      }).catch(function (error) {\n        return console.error('Error: ID not found on fake server');\n      });\n    };\n\n    _this.getTransformerKey = function (transformer, allTransformers) {\n      for (var i = 0; i < allTransformers.length; i++) {\n        if (allTransformers[i].id === transformer.id) {\n          return i;\n        }\n      }\n\n      return null;\n    };\n\n    return _this;\n  }\n\n  _createClass(EditPage, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      // deprecated!\n      // get transformer data from TransformersListItem and update editInit\n      var transformerId = Number(this.props.match.params.id);\n\n      var _this$props$transform = this.props.transformers.filter(function (transformer) {\n        return transformer.id === transformerId;\n      }),\n          _this$props$transform2 = _slicedToArray(_this$props$transform, 1),\n          transformer = _this$props$transform2[0];\n\n      this.editInit = _objectSpread({}, transformer);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var redirect = this.state.redirect;\n\n      if (redirect) {\n        return React.createElement(Redirect, {\n          to: \"/\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"d-inline-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Edit Transformer\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), React.createElement(TransformerForm, {\n        factions: this.props.factions,\n        vehicleTypes: this.props.vehicleTypes,\n        init: this.editInit,\n        method: this.saveChanges,\n        submitText: \"Save Changes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EditPage;\n}(Component);\n\nexport default EditPage;","map":{"version":3,"sources":["/home/chof/Projects/transformers/src/pages/EditPage.js"],"names":["React","Component","Redirect","TransformerForm","EditPage","state","redirect","editInit","availableVehicleTypes","availableVehicleModels","typesDisabled","modelsDisabled","name","status","faction","gear","vehicleGroup","vehicleType","vehicleModel","id","saveChanges","preparedData","transformers","props","transformerKey","getTransformerKey","fetch","method","headers","body","JSON","stringify","then","response","json","setState","updateTransformersList","catch","error","console","transformer","allTransformers","i","length","transformerId","Number","match","params","filter","factions","vehicleTypes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\nimport TransformerForm from '../components/TransformerForm.js';\n\nclass EditPage extends Component {\n\n  state = {\n    redirect: false\n  }\n\n  // Initial values for the TransformerForm\n  editInit = {\n    // Vehicles\n    availableVehicleTypes: [],\n    availableVehicleModels: [],\n    typesDisabled: false,\n    modelsDisabled: false,\n    // Transformer\n    name: '',\n    status: '',\n    faction: '',\n    gear: [],\n    vehicleGroup: '',\n    vehicleType: '',\n    vehicleModel: '',\n    id: ''\n  }\n\n  // PUT edited transformer to JSON server\n  saveChanges = (preparedData) => {\n    let transformers = [...this.props.transformers];\n    let transformerKey = this.getTransformerKey(preparedData, transformers);\n    transformers[transformerKey] = preparedData;   // mutating a list to keep the order of transformers (and TransformerStatus working)\n\n    fetch(`https://my-json-server.typicode.com/fpiskur/transformers-api/transformers/${preparedData.id}`, {\n      method: 'PUT',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ ...preparedData })\n    })\n    .then(response => response.json())\n    .then(json => {\n      this.setState({ redirect: true });\n      this.props.updateTransformersList(transformers); \n    })\n    .catch(error => console.error('Error: ID not found on fake server'));\n  }\n\n  // Return index position of transformer in allTransformers\n  getTransformerKey = (transformer, allTransformers) => {\n    for (let i = 0; i < allTransformers.length; i++) {\n      if (allTransformers[i].id === transformer.id) {\n        return i;\n      }\n    }\n    return null;\n  }\n\n  UNSAFE_componentWillMount() {   // deprecated!\n    // get transformer data from TransformersListItem and update editInit\n    let transformerId = Number(this.props.match.params.id);\n    let [transformer] = this.props.transformers\n                     .filter(transformer => transformer.id === transformerId);\n    this.editInit = { ...transformer };\n  }\n\n  render() {\n\n    let { redirect } = this.state;\n    if(redirect) {\n      return <Redirect to='/' />\n    }\n\n    return (\n      <div className=\"container\">\n        <h1 className=\"d-inline-block\">Edit Transformer</h1>\n        <hr/>\n\n        <TransformerForm\n          factions={this.props.factions}\n          vehicleTypes={this.props.vehicleTypes}\n          init={this.editInit}\n          method={this.saveChanges}\n          submitText=\"Save Changes\"\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default EditPage;\n"]},"metadata":{},"sourceType":"module"}